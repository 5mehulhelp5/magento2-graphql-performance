name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2, cs2pr

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Configure Composer auth
        run: |
          composer config http-basic.repo.magento.com ${{ secrets.MAGENTO_MARKETPLACE_PUBLIC_KEY }} ${{ secrets.MAGENTO_MARKETPLACE_PRIVATE_KEY }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: PHPCS check
        run: vendor/bin/phpcs --standard=Magento2 --report=checkstyle -q . | cs2pr

  tests:
    name: PHPUnit Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: magento_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, intl, gd, exif, iconv
          coverage: xdebug
          tools: composer:v2

      - name: Configure Composer auth
        run: |
          composer config http-basic.repo.magento.com ${{ secrets.MAGENTO_MARKETPLACE_PUBLIC_KEY }} ${{ secrets.MAGENTO_MARKETPLACE_PRIVATE_KEY }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run unit tests
        run: vendor/bin/phpunit -c Test/Unit/phpunit.xml.dist --coverage-clover=coverage.xml

      - name: Set up Magento for integration tests
        run: |
          # Create temporary directory for Magento
          mkdir -p magento
          cd magento

          # Configure Magento authentication
          composer config -g http-basic.repo.magento.com ${{ secrets.MAGENTO_MARKETPLACE_PUBLIC_KEY }} ${{ secrets.MAGENTO_MARKETPLACE_PRIVATE_KEY }}

          # Install Magento via Composer
          composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.4.6 . --no-install
          composer config --no-interaction allow-plugins.laminas/laminas-dependency-plugin true
          composer config --no-interaction allow-plugins.magento/composer-dependency-version-audit-plugin true
          composer config --no-interaction allow-plugins.magento/inventory-composer-installer true
          composer install --no-interaction

          # Create env.php configuration
          mkdir -p app/etc
          php -r '
            $config = [
                "backend" => ["frontName" => "admin"],
                "cache" => [
                    "graphql" => ["id_salt" => "test"],
                    "frontend" => [
                        "default" => [
                            "backend" => "Cm_Cache_Backend_File",
                            "backend_options" => ["cache_dir" => "var/cache"]
                        ]
                    ]
                ],
                "crypt" => ["key" => "00000000000000000000000000000000"],
                "db" => [
                    "table_prefix" => "",
                    "connection" => [
                        "default" => [
                            "host" => "127.0.0.1",
                            "dbname" => "magento_test",
                            "username" => "root",
                            "password" => "root",
                            "model" => "mysql4",
                            "engine" => "innodb",
                            "initStatements" => "SET NAMES utf8;",
                            "active" => "1",
                            "driver_options" => [1014 => false]
                        ]
                    ]
                ],
                "resource" => ["default_setup" => ["connection" => "default"]],
                "x-frame-options" => "SAMEORIGIN",
                "MAGE_MODE" => "developer",
                "session" => ["save" => "files"],
                "lock" => ["provider" => "db"],
                "directories" => ["document_root_is_pub" => true],
                "cache_types" => [
                    "config" => 1,
                    "layout" => 1,
                    "block_html" => 1,
                    "collections" => 1,
                    "reflection" => 1,
                    "db_ddl" => 1,
                    "compiled_config" => 1,
                    "eav" => 1,
                    "customer_notification" => 1,
                    "config_integration" => 1,
                    "config_integration_api" => 1,
                    "full_page" => 1,
                    "config_webservice" => 1,
                    "translate" => 1
                ],
                "downloadable_domains" => [],
                "install" => ["date" => "Thu, 22 Mar 2024 00:00:00 +0000"]
            ];
            file_put_contents("app/etc/env.php", "<?php\nreturn " . var_export($config, true) . ";\n");
          '

          # Create required directories and set permissions
          mkdir -p var/cache var/page_cache var/log var/session generated/code
          chmod -R 777 var generated pub/static app/etc

          # Install Magento
          bin/magento setup:install \
            --base-url=http://localhost \
            --db-host=127.0.0.1 \
            --db-name=magento_test \
            --db-user=root \
            --db-password=root \
            --admin-firstname=Admin \
            --admin-lastname=User \
            --admin-email=admin@example.com \
            --admin-user=admin \
            --admin-password=admin123 \
            --language=en_US \
            --currency=USD \
            --timezone=America/Los_Angeles \
            --use-rewrites=1 \
            --search-engine=elasticsearch7 \
            --elasticsearch-host=localhost \
            --elasticsearch-port=9200 \
            --cleanup-database \
            --quiet

          cd ..
          mkdir -p Test/Integration/tmp
          chmod -R 777 Test/Integration/tmp

      - name: Run integration tests
        env:
          TESTS_MAGENTO_ROOT: ${{ github.workspace }}/magento
        run: vendor/bin/phpunit -c Test/Integration/phpunit.xml.dist

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, tests]
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2

      - name: Configure Composer auth
        run: |
          composer config http-basic.repo.magento.com ${{ secrets.MAGENTO_MARKETPLACE_PUBLIC_KEY }} ${{ secrets.MAGENTO_MARKETPLACE_PRIVATE_KEY }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-dev

      - name: Create release artifact
        run: |
          zip -r Sterk_GraphQlPerformance_${{ github.event.release.tag_name }}.zip . \
            -x ".git/*" ".github/*" "Test/*" "docs/*" ".gitignore" "phpunit.xml.dist" "phpstan.neon" "psalm.xml"

      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./Sterk_GraphQlPerformance_${{ github.event.release.tag_name }}.zip
          asset_name: Sterk_GraphQlPerformance_${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip
